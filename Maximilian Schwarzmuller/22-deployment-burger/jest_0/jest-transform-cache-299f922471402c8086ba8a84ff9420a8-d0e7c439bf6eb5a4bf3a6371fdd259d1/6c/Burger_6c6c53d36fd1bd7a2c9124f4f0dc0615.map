{"version":3,"sources":["Burger.js"],"names":["Burger","props","transformedIngredients","Object","keys","ingredients","map","ingredientsKey","Array","_","i","reduce","arr","element","concat","length","classes"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;;;AAEA,MAAMA,MAAM,GAAIC,KAAD,IAAW;AACtB;AACA,MAAIC,sBAAsB,GAAGC,MAAM,CAACC,IAAP,CAAYH,KAAK,CAACI,WAAlB,EACxBC,GADwB,CACnBC,cAAD,IAAoB;AACrB;AACA;AACA,WAAO,CAAC,GAAGC,KAAK,CAACP,KAAK,CAACI,WAAN,CAAkBE,cAAlB,CAAD,CAAT,EACFD,GADE,CACE,CAACG,CAAD,EAAIC,CAAJ,KAAU;AACX;AACA,aAAO,6BAAC,yBAAD;AAAkB,QAAA,GAAG,EAAEH,cAAc,GAAGG,CAAxC;AAA2C,QAAA,IAAI,EAAEH,cAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH,KAJE,CAAP;AAKH,GATwB,EAUzB;AACA;AACA;AACA;AAbyB,GAcxBI,MAdwB,CAcjB,CAACC,GAAD,EAAMC,OAAN,KAAkB;AACtB;AACA,WAAOD,GAAG,CAACE,MAAJ,CAAWD,OAAX,CAAP;AACH,GAjBwB,EAiBtB,EAjBsB,CAA7B,CAFsB,CAoBtB;;AACA,MAAIX,sBAAsB,CAACa,MAAvB,KAAkC,CAAtC,EAAyC;AACrCb,IAAAA,sBAAsB,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAAzB;AACH;;AACD,SACI;AAAK,IAAA,SAAS,EAAEc,sBAAQhB,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,6BAAC,yBAAD;AAAkB,IAAA,IAAI,EAAC,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEKE,sBAFL,EAGI,6BAAC,yBAAD;AAAkB,IAAA,IAAI,EAAC,cAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CADJ;AAOH,CA/BD;;eAiCeF,M","sourcesContent":["import React from 'react';\nimport BurgerIngredient from './BurgerIngredient/BurgerIngredient';\nimport classes from './Burger.module.css';\n\nconst Burger = (props) => {\n    // getting the all keys of props object\n    let transformedIngredients = Object.keys(props.ingredients)\n        .map((ingredientsKey) => {\n            // constructing a new array every time\n            // console.log(...Array(props.ingredients[ingredientsKey]));\n            return [...Array(props.ingredients[ingredientsKey])]\n                .map((_, i) => {\n                    // console.log(ingredientsKey + i)\n                    return <BurgerIngredient key={ingredientsKey + i} type={ingredientsKey} />\n                })\n        })\n        // checking for any empty ingredients\n        // arr -> previous array\n        // element-> current value\n        // [] -> intial value is the reduced value of reduce function\n        .reduce((arr, element) => {\n            // console.log(element)\n            return arr.concat(element)\n        }, []);\n    // console.log(transformedIngredients);\n    if (transformedIngredients.length === 0) {\n        transformedIngredients = <p>Please start adding ingredients</p>\n    }\n    return (\n        <div className={classes.Burger}>\n            <BurgerIngredient type='bread-top' />\n            {transformedIngredients}\n            <BurgerIngredient type='bread-bottom' />\n        </div>\n    );\n};\n\nexport default Burger;"]}