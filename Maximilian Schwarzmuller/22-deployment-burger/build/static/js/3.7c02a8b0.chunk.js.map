{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","checkoutSummary","CheckoutSummary","style","fontSize","fontWeight","width","margin","Burger","ingredients","Button","buttonType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","type","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","isNumeric","country","email","isEmail","deliveryMethod","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","price","totalPrice","toFixed","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updateFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","formElementArray","this","id","config","form","onSubmit","formElement","disabled","loading","Spinner","marginLeft","Component","connect","burgerBuilder","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component"],"mappings":"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","file":"static/js/3.7c02a8b0.chunk.js","sourcesContent":["import React from 'react';\nimport classes from './Input.module.css';\n\nconst input = (props) => {\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid)\n    }\n\n    switch (props.elementType) {\n        case 'input':\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}\n            />\n            break;\n        case 'textarea':\n            inputElement = <textarea\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}\n            />\n            break;\n        case 'select':\n            inputElement = <select\n                className={inputClasses.join(' ')}\n                value={props.value}\n                onChange={props.changed}>\n                {props.elementConfig.options.map(option => (\n                    <option\n                        key={option.value}\n                        value={option.value}>\n                        {option.displayValue}\n                    </option>\n                ))}\n\n            </select>\n            break;\n        default:\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}\n            />\n    }\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    )\n};\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3PsXi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__20AK_\"};","import React from 'react';\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\nimport classes from './CheckoutSummary.module.css';\n\nconst checkoutSummary = (props) => {\n    return (\n        <div className={classes.CheckoutSummary}>\n            <h1 style={{ fontSize: '30px', fontWeight: 400 }}>We hope it tastes well!</h1>\n            <div style={{ width: '100%', margin: 'auto' }}>\n                <Burger ingredients={props.ingredients} />\n            </div>\n            <Button\n                buttonType=\"Danger\"\n                clicked={props.checkoutCancelled}\n            >CANCEL</Button>\n            <Button\n                buttonType=\"Success\"\n                clicked={props.checkoutContinued}\n            >CONTINUE</Button>\n        </div>\n    );\n}\n\nexport default checkoutSummary;","import React, { Component } from 'react';\nimport classes from './ContactData.module.css';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport Button from '../../../components/UI/Button/Button';\nimport axios from '../../../axios-orders';\nimport { connect } from 'react-redux';\nimport * as actions from '../../../store/actions/index';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport { updateObject, checkValidity } from '../../../shared/utility';\n\nclass ContactData extends Component {\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                label: 'Give your name',\n                valid: false,\n                touched: false\n            },\n            street: {\n                elementType: 'textarea',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Address/Street'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                label: 'Give your full address',\n                valid: false,\n                touched: false\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'ZIP Code'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5,\n                    isNumeric: true\n                },\n                label: 'Write your zip code',\n                valid: false,\n                touched: false\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                label: 'Give your country name',\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your E-Mail'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                label: 'Give your personal email',\n                valid: false,\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        { value: 'fastest', displayValue: 'Fastest' },\n                        { value: 'cheapest', displayValue: 'Cheapest' }\n                    ]\n                },\n                value: 'fastest',\n                label: 'Select your delivery method',\n                validation: {},\n                valid: true\n            }\n        },\n        formIsValid: false,\n    }\n\n    orderHandler = (event) => {\n        event.preventDefault();\n\n        const formData = {};\n        for (let formElementIdentifier in this.state.orderForm) {\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n        }\n\n        const order = {\n            ingredients: this.props.ingredients,\n            price: this.props.totalPrice.toFixed(2),\n            orderData: formData,\n            userId: this.props.userId\n        }\n        this.props.onOrderBurger(this.props.token, order);\n    }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n        const updateFormElement = updateObject(this.state.orderForm[inputIdentifier], {\n            value: event.target.value,\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\n            touched: true\n        });\n        const updatedOrderForm = updateObject(this.state.orderForm, {\n            [inputIdentifier]: updateFormElement\n        });\n\n        let formIsValid = true;\n        for (let inputIdentifier in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid\n        }\n        this.setState({\n            orderForm: updatedOrderForm,\n            formIsValid: formIsValid\n        });\n    }\n    \n    render() {\n        const formElementArray = [];\n        for (let key in this.state.orderForm) {\n            formElementArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            });\n        }\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElementArray.map(formElement => (\n                    <Input\n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        label={formElement.config.label}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)}\n                    />\n                ))}\n                <Button buttonType=\"Order\" disabled={!this.state.formIsValid}>ORDER</Button>\n            </form>\n        );\n        if (this.props.loading) {\n            form = <Spinner />;\n        }\n        return (\n            <div className={classes.ContactData}>\n                <big style={{ marginLeft: '10px' }}>Enter your Contact Information</big>\n                {form}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        ingredients: state.burgerBuilder.ingredients,\n        totalPrice: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onOrderBurger: (token, orderData) => dispatch(actions.purchaseBurger(token, orderData))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, { Component } from 'react';\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\nimport { Route, Redirect } from 'react-router-dom';\nimport ContactData from './ContactData/ContactData';\nimport { connect } from 'react-redux';\n\nclass Checkout extends Component {\n    checkoutCancelledHandler = () => {\n        this.props.history.goBack();\n    }\n\n    checkoutContinuedHandler = () => {\n        this.props.history.replace('/checkout/contact-data');\n    }\n\n    render() {\n        let summary = <Redirect to=\"/\" />\n        if (this.props.ingredients) {\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null;\n            summary = (\n                <div>\n                    {purchasedRedirect}\n                    <CheckoutSummary\n                        ingredients={this.props.ingredients}\n                        checkoutCancelled={this.checkoutCancelledHandler}\n                        checkoutContinued={this.checkoutContinuedHandler} />\n                    <Route\n                        path={this.props.match.path + '/contact-data'}\n                        component={ContactData} />\n                </div>\n            );\n        }\n        return summary;\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        ingredients: state.burgerBuilder.ingredients,\n        purchased: state.order.purchased\n    };\n}\n\nexport default connect(mapStateToProps, null)(Checkout);"],"sourceRoot":""}