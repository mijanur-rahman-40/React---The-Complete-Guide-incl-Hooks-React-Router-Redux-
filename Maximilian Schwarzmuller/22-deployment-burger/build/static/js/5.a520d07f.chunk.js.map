{"version":3,"sources":["components/Order/Order.module.css","components/Order/Order.js","containers/Orders/Orders.js"],"names":["module","exports","order","props","ingredients","ingredientName","push","name","amount","ingredientOutput","map","ingredient","style","textTransform","display","margin","border","padding","borderRadius","key","className","classes","Order","Number","parseFloat","price","toFixed","Orders","this","onFetchOrders","token","userId","orders","Spinner","loading","id","Component","connect","state","auth","dispatch","actions","withErrorHandler","axios"],"mappings":"uHACAA,EAAOC,QAAU,CAAC,MAAQ,uB,yHCmCXC,EAjCD,SAACC,GACX,IAAMC,EAAc,GAEpB,IAAK,IAAIC,KAAkBF,EAAMC,YAC7BA,EAAYE,KACR,CACIC,KAAMF,EACNG,OAAQL,EAAMC,YAAYC,KAKtC,IAAMI,EAAmBL,EAAYM,KAAI,SAAAC,GACrC,OAAO,0BACHC,MAAO,CACHC,cAAe,aACfC,QAAS,eACTC,OAAQ,UACRC,OAAQ,uBACRC,QAAS,MACTC,aAAa,OAEjBC,IAAKR,EAAWJ,MAAOI,EAAWJ,KAT/B,KASuCI,EAAWH,OATlD,QAYX,OACI,yBAAKY,UAAWC,IAAQC,OACpB,2CAAiBb,GACjB,qCAAU,oCAAUc,OAAOC,WAAWrB,EAAMsB,OAAOC,QAAQ,O,gCCvBjEC,E,4LAEEC,KAAKzB,MAAM0B,cAAcD,KAAKzB,MAAM2B,MAAOF,KAAKzB,MAAM4B,U,+BAItD,IAAIC,EAAS,kBAACC,EAAA,EAAD,MASb,OARKL,KAAKzB,MAAM+B,UACZF,EAASJ,KAAKzB,MAAM6B,OAAOtB,KAAI,SAAAR,GAAK,OAChC,kBAACoB,EAAD,CACIH,IAAKjB,EAAMiC,GACX/B,YAAaF,EAAME,YACnBqB,MAAOvB,EAAMuB,YAIrB,6BACKO,O,GAjBII,aAoCNC,uBAdS,SAACC,GACrB,MAAO,CACHN,OAAQM,EAAMpC,MAAM8B,OACpBE,QAASI,EAAMpC,MAAMgC,QACrBJ,MAAOQ,EAAMC,KAAKT,MAClBC,OAAQO,EAAMC,KAAKR,WAIA,SAACS,GACxB,MAAO,CACHX,cAAe,SAACC,EAAOC,GAAR,OAAmBS,EAASC,IAAoBX,EAAOC,QAG/DM,CAA6CK,YAAiBf,EAAQgB","file":"static/js/5.a520d07f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order__3kYZJ\"};","import React from 'react';\nimport classes from './Order.module.css';\n\nconst order = (props) => {\n    const ingredients = [];\n\n    for (let ingredientName in props.ingredients) {\n        ingredients.push(\n            {\n                name: ingredientName,\n                amount: props.ingredients[ingredientName]\n            }\n        );\n    }\n\n    const ingredientOutput = ingredients.map(ingredient => {\n        return <span\n            style={{\n                textTransform: 'capitalize',\n                display: 'inline-block',\n                margin: '2px 8px',\n                border: '1px solid whitesmoke',\n                padding: '5px',\n                borderRadius:'3px'\n            }}\n            key={ingredient.name}>{ingredient.name} ({ingredient.amount})</span>;\n    });\n\n    return (\n        <div className={classes.Order}>\n            <p>Ingredients: {ingredientOutput}</p>\n            <p>Price: <big>USD {Number.parseFloat(props.price).toFixed(2)}</big></p>\n        </div>\n    );\n};\n\nexport default order;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Order from '../../components/Order/Order';\nimport axios from '../../axios-orders';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport * as actions from '../../store/actions/index';\n\nclass Orders extends Component {\n    componentDidMount() {\n        this.props.onFetchOrders(this.props.token, this.props.userId);\n    }\n\n    render() {\n        let orders = <Spinner />;\n        if (!this.props.loading) {\n            orders = this.props.orders.map(order => (\n                <Order\n                    key={order.id}\n                    ingredients={order.ingredients}\n                    price={order.price} />\n            ))\n        }\n        return (\n            <div>\n                {orders}\n            </div>\n        );\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        orders: state.order.orders,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onFetchOrders: (token, userId) => dispatch(actions.fetchOrders(token, userId))\n    };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios));"],"sourceRoot":""}