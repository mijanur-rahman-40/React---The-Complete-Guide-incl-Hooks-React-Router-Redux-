{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","id","config","form","formElement","loading","errorMessage","error","style","color","marginLeft","message","authRedirect","isAuthenticated","to","onSubmit","buttonType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","isSignUp","actions"],"mappings":"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","file":"static/js/4.c8336ab3.chunk.js","sourcesContent":["import React from 'react';\nimport classes from './Input.module.css';\n\nconst input = (props) => {\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid)\n    }\n\n    switch (props.elementType) {\n        case 'input':\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}\n            />\n            break;\n        case 'textarea':\n            inputElement = <textarea\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}\n            />\n            break;\n        case 'select':\n            inputElement = <select\n                className={inputClasses.join(' ')}\n                value={props.value}\n                onChange={props.changed}>\n                {props.elementConfig.options.map(option => (\n                    <option\n                        key={option.value}\n                        value={option.value}>\n                        {option.displayValue}\n                    </option>\n                ))}\n\n            </select>\n            break;\n        default:\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}\n            />\n    }\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    )\n};\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Zul_\"};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport { updateObject, checkValidity } from '../../shared/utility';\n\nclass Auth extends Component {\n    state = {\n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'email'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                label: 'Give your email address',\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6\n                },\n                label: 'Give your password',\n                valid: false,\n                touched: false\n            }\n        },\n        isSignup: true\n    }\n\n    componentDidMount() {\n        if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n            this.props.onSetAuthRedirectPath();\n        }\n    }\n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = updateObject(this.state.controls, {\n            [controlName]: updateObject(this.state.controls, {\n                value: event.target.value,\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n            })\n        });\n        this.setState({ controls: updatedControls });\n    }\n\n    submitHandler = (event) => {\n        event.preventDefault();\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n    }\n\n    switchAuthModeHandler = () => {\n        this.setState(prevState => {\n            return { isSignup: !prevState.isSignup }\n        });\n    }\n\n    render() {\n        const formElementsArray = [];\n        for (let key in this.state.controls) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key]\n            });\n        }\n        let form = formElementsArray.map(formElement => (\n            <Input\n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                label={formElement.config.label}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n        ));\n\n        if (this.props.loading) {\n            form = <Spinner />\n        }\n\n        let errorMessage = null;\n        if (this.props.error) {\n            errorMessage = <p style={{ color: 'red', marginLeft: '10px' }}>{this.props.error.message}</p>\n        }\n\n        let authRedirect = null;\n        if (this.props.isAuthenticated) {\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\n        }\n\n        return (\n            <div className={classes.Auth}>\n                <form onSubmit={(event) => this.submitHandler(event)}>\n                    <big style={{ marginLeft: '10px' }}>Enter your Contact Information</big>\n                    {form}\n                    <Button buttonType='Success'>SUBMIT</Button>\n                </form>\n                {authRedirect}\n                {errorMessage}\n                <Button\n                    clicked={this.switchAuthModeHandler}\n                    buttonType='Danger'\n                >SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}</Button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token !== null,\n        buildingBurger: state.burgerBuilder.building,\n        authRedirectPath: state.auth.authRedirectPath\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"],"sourceRoot":""}